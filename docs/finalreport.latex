% This is a template to create your final report as a pdf.
% Just fill in the areas and run pdflatex FinalReport.tex
% For more information on LaTeX documents consult The (Not So
% Short Introduction to LateX2e

\documentclass{article}
\usepackage[pdftex]{graphicx,color}
\def\baselinestretch{1.5} % line spaceing
\title{ECE437L Preliminary Report \\ TA: Eric}
\author{Nabeel Zaim \and Steven Ellis} 
\date{April 18}

\begin{document}
  \maketitle
  
  \pagebreak

  \section{Executive Summary}
  
  We have designed several implementations of a MIPS CPU. First there was a singlecycle CPU, which executes one instruction per clock cycle. Then we implemented a 5 stage pipeline which overlaps several instructions to increase the clock rate. Then we added caches to reduce average memory access time. Then we implemented a coherence controller for a dual-core CPU.
  
  In the rest of the report, the design and verification process of both the caches and the cache coherence implementation will be discussed.
  \pagebreak
  
  \section{Processor Design}
  
    \subsection{Pipeline Design}
  \textbf{5-stage}

\textbf{Forwarding} (from mem to ex on rtype, from mem to ex on lw w/ stall, from wb to ex)

\textbf{Branch prediction} (static not-taken predictor, resolved in ex)

  \begin{figure}[hp]
    \begin{center}
      \includegraphics[width=\textwidth]{pipeline_datapath.pdf}
    \end{center}
    \caption{Pipeline Diagram}
  \end{figure}

  \subsection{Cache Design}
  
    \begin{figure}[hp]
    \begin{center}
      \includegraphics[width=\textwidth]{caches.pdf}
    % You can change the type of figure to a .png, .pdf, .jpg, .mps
    \end{center}

    \caption{Data Cache Diagram}
  \end{figure}
  1KB 2-way set associative with each block containing 2 words as well as valid, dirty, and state bits.

Implemented as a state machine since filling or flushing a multiple-word block requires multiple memory cycles (the memory can only supply one word at a time).

Description of states.

Verification of dcache involved testing reading and writing. Data incurring cumpulsory misses (tests fetch states), conflict misses with no dirty block, conflict misses with dirty block, working on data with index match but different tag (tests set associativity), flushing.

  
  \subsection{Multicore Design}
  The CPU designed utilizes a shared memory model architecture - one where multiple processors work on data in a shared address space, communicating over a single shared bus connecting the cores to each other and to main memory. Figure 1 shows the arrangement of the datapath and cache components of the CPU with respect to the memory.

  In the process of implementing multiple cores, hardware has been added to support write atomicity through \textbf{load-link/store-conditional} instructions. The address to work on is stored in a link register, which is a latch with two fields - a 32-bit address field and a 1-bit valid field. This allowed the implementation to be kept simple. The register may be written to or read from but its result would only hold value (i.e. denote a true atomic operation) when paired with a high valid bit.
  
  One key change that needed to be made to implement multicore was to replace the memory controller with a bus controller, for a bus which connects to RAM and both CPUs. This bus controller arbitrates between the two CPU cores, facilitating memory access and transitions in the MSI state machine for cache coherence. The bus controller is implmented with its own state machine, different from but tightly interconnected with the MSI state machine. One of the important design decisions in a multicore CPU is how to implement this bus controller and its state machine.
  
  The bus controller state machine starts out in an idle state, which it remains in as long as there is no activity on the bus. Whenever one or both of the CPU cores initiates a bus transaction, the bus controller transitions to a state giving one of the cores control over the bus. The arbitration gives control to whoever comes first, and in the case of both cores requesting at the same time, core 0 wins. The next state sends out signals for a snoop operation, where the requesting core will inform the other core if it needs to invalidate a block or perform a cache to cache transfer. After snooping, if the other core is forced to do a writeback by the coherence operation, a new state is entered for the writeback. If the writeback isn't needed or after the writeback completes, a memory access state is entered which allows the cache to access memory for either a read or a write. Once that core indicates that it has completed its memory transaction, the bus controller then returns to idle.

- what? MSI in dcache
- how we tested? running it through a parallel program (similar to dual.llsc) that would utilize the same address block. Only a single address was changed to keep it simple - the block in dcache was monitored for state transitions while one core would write and the other would read, and then vice versa. 

  \begin{figure}[hp]
    \begin{center}
      \includegraphics[width=\textwidth]{multicore.png}
    \end{center}
    \caption{Multicore Block Diagram}
   \end{figure}

\begin{quote}
\textit{In this section you should discuss your methodology for testing and verifying
your designs. Discuss the design choices you made with each design and the
verifcation process you used on your design's components and the overall
design itself. Discuss the test cases, corner cases, and expected use cases
that you verified, and how you came up with these tests (assembly and test
benches).}

\textit{Be sure to discuss the implementation and verification of the coherence
controller addition to the memory controller, and the additions to the caches
to implement the MSI protocol.}

\textit{If you tell what we already know (that you made a cache hierarchy, and
we implemented a coherence protocol), you get zero points for this section.
Also, just telling us that you used the tools we gave you to debug and do
the verification will net you zero points. We know you used tools, what we
don't know is your thought process and the critical thinking skills you used
to come up with ideas to design, implement, and verify your processors.}
\end{quote}



	\section{Processor Debug}

  \section{Results}

  \begin{table}[!hbp]

    \begin{tabular}{|l|l|}
      \hline
      Chip Area & ?? \\ \hline
      Minimum Clock Cycle & ??ns \\ \hline
      CPI without cache & ?? cycles \\ \hline
      CPI with cache & ??cyles \\ \hline
      \ldots & \ldots \\ \hline
    \end{tabular}

    \caption{Synthesis Results}
  \end{table}

  Text for your results

  \section{Conclusion}

  Text for your conclusion

\end{document}
