% This is a template to create your final report as a pdf.
% Just fill in the areas and run pdflatex FinalReport.tex
% For more information on LaTeX documents consult The (Not So
% Short Introduction to LateX2e

\documentclass[12pt]{article}
\usepackage[pdftex]{graphicx,color}
\def\baselinestretch{1.5} % line spaceing
\title{ECE437L Preliminary Report \\ TA: Eric}
\author{Nabeel Zaim \and Steven Ellis} 
\date{April 18}

\begin{document}
  \maketitle
  
  \pagebreak

  \section{Executive Summary}
  
  We have designed several implementations of a MIPS CPU. First there was a singlecycle CPU, which executes one instruction per clock cycle. Then we implemented a 5 stage pipeline which overlaps several instructions to increase the clock rate. Then we added caches to reduce average memory access time. Then we implemented a coherence controller for a dual-core CPU.
  
  In the rest of the report, the design and verification process of both the caches and the cache coherence implementation will be discussed.
  \pagebreak
  
  \section{Processor Design and Verification}
  
    \subsection{Pipeline Design}
  \textbf{5-stage}

\textbf{Forwarding} (from mem to ex on rtype, from mem to ex on lw w/ stall, from wb to ex)

\textbf{Branch prediction} (static not-taken predictor, resolved in ex)



  \subsection{Cache Design}
  
  1KB 2-way set associative with each block containing 2 words as well as valid, dirty, and state bits.

Implemented as a state machine since filling or flushing a multiple-word block requires multiple memory cycles (the memory can only supply one word at a time).

Description of states. Fetch, Writeback, Flush.

  Within the caches, each block holds an MSI state. It arbitrates with other caches by sending BusRd, BusRdX and BusCache signals onto the bus. 

The MSI protocol was tested by running it through a parallel program (similar to dual.llsc) that would utilize the same address block. Only a single address was changed to keep it simple - the block in dcache was monitored for state transitions while one core would write and the other would read, and then vice versa. 

Verification of dcache involved testing reading and writing. Data incurring cumpulsory misses (tests fetch states), conflict misses with no dirty block, conflict misses with dirty block, working on data with index match but different tag (tests set associativity), flushing.

The common case of dcache use is one where a block is brought into cache and used in the near future. Situations that would degrade the performance would be one such as two cores constantly writing to and reading from a single address. Each cache would be constantly invalidating the other, thus saturating the bus and allowing few cache hits.

  
  \subsection{Multicore Design}
  The CPU designed utilizes a shared memory model architecture - one where multiple processors work on data in a shared address space, communicating over a single shared bus connecting the cores to each other and to main memory. Figure 1 shows the arrangement of the datapath and cache components of the CPU with respect to the memory.

  In the process of implementing multiple cores, hardware has been added to support write atomicity through \textbf{load-link/store-conditional} instructions. The address to work on is stored in a link register, which is a latch with two fields - a 32-bit address field and a 1-bit valid field. This allowed the implementation to be kept simple. The register may be written to or read from but its result would only hold value (i.e. denote a true atomic operation) when paired with a high valid bit.
  
  One key change that needed to be made to implement multicore was to replace the memory controller with a bus controller, for a bus which connects to RAM and both CPUs. This bus controller arbitrates between the two CPU cores, facilitating memory access and transitions in the MSI state machine for cache coherence. The bus controller is implemented with its own state machine, different from but tightly interconnected with the MSI state machine. One of the important design decisions in a multicore CPU is how to implement this bus controller and its state machine.
  
  The bus controller state machine starts out in an idle state, which it remains in as long as there is no activity on the bus. Whenever one or both of the CPU cores initiates a bus transaction, the bus controller transitions to a state giving one of the cores control over the bus. The arbitration gives control to whoever comes first, and in the case of both cores requesting at the same time, core 0 wins. The next state sends out signals for a snoop operation, where the requesting core will inform the other core if it needs to invalidate a block or perform a cache to cache transfer. After snooping, if the other core is forced to do a writeback by the coherence operation, a new state is entered for the writeback. If the writeback isn't needed or after the writeback completes, a memory access state is entered which allows the cache to access memory for either a read or a write. Once that core indicates that it has completed its memory transaction, the bus controller then returns to idle.

  \pagebreak
  \subsection{Diagrams}

  \begin{figure}[hp]
      \includegraphics[width=\textwidth,angle=90]{pipeline_datapath.pdf}
    \caption{Pipeline Diagram}
  \end{figure}

    \begin{figure}[hp]
      \includegraphics[width=\textwidth]{caches.pdf}
    \caption{Data Cache Diagram}
  \end{figure}
  
   \begin{figure}[hp]
      \includegraphics[width=\textwidth]{cache_coherence_state_diagram.png}
    \caption{Data Cache Diagram}
  \end{figure}
  

  \begin{figure}[hp]
      \includegraphics[width=\textwidth]{multicore.png}
    \caption{Multicore Block Diagram}
   \end{figure}
   \pagebreak

  \section{Results}

  \begin{table}[!hbp]

    \begin{tabular}{|l|l|}
      \hline
      Logic Elements Used & 3,542 \\ \hline
      Minimum Clock Cycle & 24.3ns \\ \hline
      CPI without cache & 1.4 cycles \\ \hline
    \end{tabular}

    \caption{Singlecycle Synthesis Results}
  \end{table}
  
    \begin{table}[!hbp]

    \begin{tabular}{|l|l|}
      \hline
      Logic Elements & 3,518 \\ \hline
      Minimum Clock Cycle & 12.2ns \\ \hline
      CPI & 1.9  cycles \\ \hline
    \end{tabular}

    \caption{Pipeline Synthesis Results}
  \end{table}
  
    \begin{table}[!hbp]

    \begin{tabular}{|l|l|}
      \hline
      Logic Elements & 9,662 \\ \hline
      Minimum Clock Cycle & 17.0ns \\ \hline
      CPI & 1.9 cycles \\ \hline
    \end{tabular}

    \caption{Pipeline with cache Synthesis Results}
  \end{table}
  
      \begin{table}[!hbp]

    \begin{tabular}{|l|l|}
      \hline
      Logic Elements & 23,310 \\ \hline
      Minimum Clock Cycle & 25.2ns \\ \hline
      CPI & 2.3 cycles \\ \hline
    \end{tabular}

    \caption{Multicore Synthesis Results}
  \end{table}

  Text for your results

  \section{Conclusion}

  Text for your conclusion

\end{document}
